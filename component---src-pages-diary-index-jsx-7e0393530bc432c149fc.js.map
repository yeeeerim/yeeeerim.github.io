{"version":3,"file":"component---src-pages-diary-index-jsx-7e0393530bc432c149fc.js","mappings":"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","sources":["webpack://gatsby-starter-portfolio-minimal-theme/./src/components/diary/data.ts","webpack://gatsby-starter-portfolio-minimal-theme/./src/components/diary/ArticleCard.tsx","webpack://gatsby-starter-portfolio-minimal-theme/./src/components/diary/ArticlesSection.tsx","webpack://gatsby-starter-portfolio-minimal-theme/./src/components/diary/DiarySection.tsx","webpack://gatsby-starter-portfolio-minimal-theme/./src/pages/diary/index.jsx"],"sourcesContent":["import { graphql, useStaticQuery } from \"gatsby\";\n\ninterface MediumArticle {\n  author: string;\n  categories: string[];\n  content: string;\n  description: string;\n  link: string;\n  pubDate: string;\n  thumbnail: string;\n  title: string;\n}\n\ninterface MediumFeedData {\n  feed: Record<string, unknown>;\n  items: MediumArticle[];\n}\n\ninterface ArticlePreviewQueryResult {\n  allArticle: {\n    articles: {\n      categories: string[];\n      date: string;\n      slug: string;\n      title: string;\n      readingTime: {\n        text: string;\n      };\n    }[];\n  };\n}\n\nexport async function useMediumFeed(\n  profileUrl: string\n): Promise<MediumArticle[]> {\n  let mediumArticleList: MediumArticle[] = [];\n  const feedUrl = constructMediumFeedUrl(profileUrl);\n\n  try {\n    const res = await fetch(feedUrl, {\n      headers: { Accept: \"application/json\" },\n    });\n    const data = (await res.json()) as MediumFeedData;\n    // The Medium RSS feed provides not only articles but comments as well. Here, we filter\n    // for items that have at least one category. This is our trivial approach to select\n    // only articles (because comments can't have any categories) ¯\\_(ツ)_/¯\n    const dataWithArticlesOnly = data.items.filter(\n      (item) => item.categories.length !== 0\n    );\n    mediumArticleList = [...dataWithArticlesOnly];\n  } catch (error) {\n    console.warn(\"Fetching Medium Feed failed.\", error);\n  }\n\n  return mediumArticleList;\n}\n\nfunction constructMediumFeedUrl(profileUrl: string): string {\n  const RSS_2_JSON_API = \"https://api.rss2json.com/v1/api.json?rss_url=\";\n\n  // Remove trailing slashes from mediumProfile, append /feed, and make it URL friendly\n  return (\n    RSS_2_JSON_API +\n    encodeURIComponent(profileUrl.replace(/\\/+$/, \"\") + \"/feed\")\n  );\n}\n\nexport const useLocalDataSource = (): ArticlePreviewQueryResult => {\n  return useStaticQuery(graphql`\n    query ArticlePreviewQuery {\n      allArticle {\n        articles: nodes {\n          categories\n          date(formatString: \"YYYY-MM-DD HH:mm:ss\")\n          slug\n          title\n          readingTime {\n            text\n          }\n        }\n      }\n    }\n  `);\n};\n","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\nimport SkeletonLoader from \"tiny-skeleton-loader-react\";\nimport { ImageObject } from \"gatsby-theme-portfolio-minimal/src/types\";\nimport {\n  Theme,\n  useGlobalState,\n} from \"gatsby-theme-portfolio-minimal/src/context\";\nimport styled from \"@emotion/styled\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\ndayjs.extend(relativeTime);\n\nexport interface ArticleCard {\n  image?: ImageObject;\n  category: string;\n  title: string;\n  publishedAt: Date;\n  readingTime?: string;\n  link: string;\n}\n\ninterface ArticleCardProps {\n  data: ArticleCard;\n  showBanner?: boolean;\n}\n\nexport function ArticleCard(props: ArticleCardProps): React.ReactElement {\n  const { globalState } = useGlobalState();\n  const darkModeEnabled = globalState.theme === Theme.Dark;\n\n  const dateNow = dayjs();\n  const relativeTime = dateNow.from(props.data.publishedAt, true);\n\n  // Needed to differentiate between external and internal links (whether or not we use Gatsby Link)\n  const absoluteUrl =\n    props.data.link.indexOf(\"://\") > 0 || props.data.link.indexOf(\"//\") === 0;\n\n  const articleCard = (\n    <article\n      className={\"Card\"}\n      style={\n        darkModeEnabled\n          ? { border: \"0.125rem solid var(--primary-color)\" }\n          : undefined\n      }\n    >\n      {props.showBanner && (\n        <div className={\"Banner\"}>\n          {props.data.image && props.data.image.src && (\n            <GatsbyImage\n              className={\"ImageWrapper\"}\n              imgClassName={\"Image\"}\n              image={props.data.image.src.childImageSharp.gatsbyImageData}\n              alt={props.data.image.alt || props.data.title}\n            />\n          )}\n        </div>\n      )}\n      <div className={\"DescriptionWrapper\"}>\n        <span className={\"Category\"}>\n          <u>{props.data.category}</u>\n        </span>\n        <h4 className={\"Title\"}>{props.data.title}</h4>\n        <div className={\"Details\"}>\n          {formatDate(props.data.publishedAt)}\n          <span className={\"RelativeTime\"}>{relativeTime} ago</span>\n        </div>\n      </div>\n    </article>\n  );\n\n  return (\n    <ArticleCardStyled>\n      {absoluteUrl ? (\n        <a\n          href={props.data.link}\n          target=\"_blank\"\n          rel=\"nofollow noopener noreferrer\"\n          title={props.data.title}\n        >\n          {articleCard}\n        </a>\n      ) : (\n        <Link\n          to={props.data.link.replace(\"diarys/\", `diary/?title=`)}\n          title={props.data.title}\n        >\n          {articleCard}\n        </Link>\n      )}\n    </ArticleCardStyled>\n  );\n}\n\nexport function ArticleCardSkeleton(): React.ReactElement {\n  const { globalState } = useGlobalState();\n  const darkModeEnabled = globalState.theme === Theme.Dark;\n  return (\n    <div\n      className={\"Card\"}\n      style={\n        darkModeEnabled\n          ? { border: \"0.125rem solid var(--primary-color)\" }\n          : undefined\n      }\n    >\n      <div className={\"DescriptionWrapper\"}>\n        <SkeletonLoader\n          style={{\n            height: \"1.5rem\",\n            marginBottom: \".5rem\",\n            background: \"var(--tertiary-color)\",\n          }}\n        />\n        <SkeletonLoader\n          style={{ height: \"4rem\", background: \"var(--tertiary-color)\" }}\n        />\n        <SkeletonLoader\n          style={{\n            height: \".75rem\",\n            width: \"50%\",\n            marginTop: \".5rem\",\n            background: \"var(--tertiary-color)\",\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction formatDate(date: Date): string {\n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n  return `${months[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`;\n}\n\nconst ArticleCardStyled = styled.div`\n  .Card {\n    width: 16.25rem;\n    height: auto;\n    min-height: 12rem;\n    display: inline-flex;\n    flex-direction: column;\n    justify-content: space-around;\n    margin: 1rem 2.5rem 2rem 0;\n    box-shadow: 0 5px 15px var(--box-shadow-color);\n    border-radius: var(--border-radius);\n    background: var(--card-color);\n    white-space: normal;\n    transition: box-shadow 0.3s ease-out;\n  }\n\n  .Card:hover {\n    box-shadow: 0 5px 15px var(--box-shadow-hover-color);\n  }\n\n  .Card .Banner {\n    height: 5rem;\n    border-top-left-radius: var(--border-radius);\n    border-top-right-radius: var(--border-radius);\n    background: var(--tertiary-color);\n  }\n\n  .Card .ImageWrapper {\n    height: 100%;\n    max-height: 5rem;\n  }\n\n  .Card .Image {\n    border-top-left-radius: var(--border-radius);\n    border-top-right-radius: var(--border-radius);\n  }\n\n  .Card .DescriptionWrapper {\n    height: auto;\n    padding: 2rem 1rem;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  }\n\n  .Card .Category {\n    color: var(--primary-color);\n    text-transform: uppercase;\n    letter-spacing: +1px;\n    font-weight: 700;\n  }\n\n  .Card .Title {\n    margin: 0.25rem 0;\n    font-size: 1rem;\n    line-height: 1.5rem;\n    font-weight: 400;\n  }\n\n  .Card .Details {\n    font-size: 0.75rem;\n    color: var(--subtext-color);\n    letter-spacing: +0.5px;\n  }\n\n  .Card .RelativeTime {\n    margin-left: 0.25rem;\n  }\n\n  .Card .RelativeTime::before {\n    content: \"–\";\n    margin-right: 0.25rem;\n  }\n`;\n","import React from \"react\";\nimport { Animation } from \"gatsby-theme-portfolio-minimal/src/components/Animation\";\nimport { Slider } from \"gatsby-theme-portfolio-minimal/src/components/Slider\";\nimport { useSiteMetadata } from \"gatsby-theme-portfolio-minimal/src/hooks/useSiteMetadata\";\nimport { useMediumFeed } from \"gatsby-theme-portfolio-minimal/src/sections/Articles/data\";\nimport { PageSection } from \"gatsby-theme-portfolio-minimal/src/types\";\nimport styled from \"@emotion/styled\";\nimport { useLocalDataSource } from \"./data\";\nimport { ArticleCard } from \"./ArticleCard\";\n\nenum ArticleSource {\n  Medium = \"medium\",\n  Blog = \"blog\",\n}\n\ninterface ArticleSourceConfiguration {\n  [ArticleSource.Medium]?: {\n    profileUrl: string;\n  };\n  [ArticleSource.Blog]?: {\n    valid: boolean;\n  };\n}\n\ninterface ArticlesSectionProps extends PageSection {\n  sources: ArticleSource[];\n}\n\nexport function ArticlesSection(\n  props: ArticlesSectionProps\n): React.ReactElement {\n  const response = useLocalDataSource();\n  const [articles, setArticles] = React.useState<ArticleCard[]>([]);\n  const configuration = validateAndConfigureSources(props.sources);\n\n  async function collectArticlesFromSources(\n    configuration: ArticleSourceConfiguration\n  ): Promise<ArticleCard[]> {\n    const mediumConfig = configuration[ArticleSource.Medium];\n    const blogConfig = configuration[ArticleSource.Blog];\n    const articleList: ArticleCard[] = [];\n\n    if (mediumConfig !== undefined) {\n      const mediumArticles = await useMediumFeed(mediumConfig.profileUrl);\n      if (mediumArticles.length > 0) {\n        mediumArticles.forEach((article) => {\n          articleList.push({\n            category: article.categories[0],\n            title: article.title,\n            publishedAt: new Date(article.pubDate.replace(/-/g, \"/\")), // https://stackoverflow.com/a/5646753\n            link: article.link,\n          });\n        });\n      }\n    }\n\n    if (blogConfig !== undefined) {\n      const blogArticles = response.allArticle.articles;\n      if (blogArticles.length > 0) {\n        blogArticles.forEach((article) => {\n          articleList.push({\n            category: article.categories[0],\n            title: article.title,\n            publishedAt: new Date(article.date.replace(/-/g, \"/\")),\n            link: article.slug,\n            readingTime: article.readingTime.text,\n          });\n        });\n      }\n    }\n\n    return articleList\n      .slice()\n      .sort((a, b) => b.publishedAt.getTime() - a.publishedAt.getTime());\n  }\n\n  React.useEffect(() => {\n    (async function () {\n      setArticles(await collectArticlesFromSources(configuration));\n    })();\n  }, []);\n\n  return (\n    <ArticleStyled>\n      <Animation type=\"fadeUp\" delay={0}>\n        <div className=\"head\">{props.heading}</div>\n        <Slider additionalClasses={[\"Articles\"]}>\n          {articles.length > 0\n            ? articles.slice(0, 3).map((article, key) => {\n                return <ArticleCard key={key} data={article} />;\n              })\n            : [...Array(1)].map((_, key) => {\n                return <div key={key}>작성된 글이 없습니다.</div>;\n              })}\n        </Slider>\n      </Animation>\n    </ArticleStyled>\n  );\n}\n\n// validateAndConfigureSources: Sources for articles can be defined as props (e.g. sources=[\"Medium\"])\n// Currently, only Medium can be used as a source but it is thinkable to extend this approach to other\n// sources (e.g. an integrated Markdown blog). To collect all articles from the source, there is a\n// specific configuration needed for each source type. For example, to collect articles from Medium,\n// we need the profile URL. This function is responsible for validating that at least one source is\n// defined. It than adds the needed configuration properties to each source and returns the config.\n\nfunction validateAndConfigureSources(\n  sources: ArticleSource[]\n): ArticleSourceConfiguration {\n  const configuration: ArticleSourceConfiguration = {};\n\n  if (sources.length > 0) {\n    // Configure Medium\n    if (sources.map((i) => i.toLowerCase()).includes(ArticleSource.Medium)) {\n      const siteMetadata = useSiteMetadata();\n      configuration[ArticleSource.Medium] = {\n        profileUrl: siteMetadata.social.medium,\n      };\n    }\n\n    // Configure Blog (actually no real configuration is required yet)\n    if (sources.map((i) => i.toLowerCase()).includes(ArticleSource.Blog)) {\n      configuration[ArticleSource.Blog] = { valid: true };\n    }\n  } else {\n    throw new Error(\"No Source for Articles defined.\");\n  }\n\n  return configuration;\n}\n\nconst ArticleStyled = styled.div`\n  .head {\n    font-size: 24px;\n    font-weight: 800;\n  }\n  .Articles {\n    margin-top: 28px;\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n  }\n`;\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\nimport { ArticlesSection } from \"./ArticlesSection\";\n\nenum ArticleSource {\n  Medium = \"medium\",\n  Blog = \"blog\",\n}\n\nconst DiarySection = () => {\n  return (\n    <DiaryStyled>\n      <ArticlesSection\n        sectionId=\"diary\"\n        heading=\"Diary\"\n        sources={[ArticleSource.Blog]}\n      />\n    </DiaryStyled>\n  );\n};\n\nexport default DiarySection;\n\nconst DiaryStyled = styled.div`\n  width: 100%;\n  height: 100%;\n  max-width: var(--page-width);\n  margin: 0 auto;\n  padding: var(--page-padding);\n  justify-content: space-between;\n`;\n","import { Seo } from \"gatsby-theme-portfolio-minimal\";\nimport React from \"react\";\nimport DiarySection from \"../../components/diary/DiarySection\";\nimport DiaryDetailSection from \"../../components/diary/detail/DiaryDetailSection\";\nimport { Page } from \"../../components/page\";\n\nconst DiaryPage = () => {\n  const title = new URLSearchParams(window.location.search).get(\"title\");\n  if (title) {\n    return (\n      <>\n        <Seo title={title || \"Diary\"} useTitleTemplate={true} noIndex={true} />\n        <DiaryDetailSection title={title} />\n      </>\n    );\n  }\n  return (\n    <>\n      <Seo title=\"Diary\" useTitleTemplate={true} noIndex={true} />\n      <Page>\n        <DiarySection />\n      </Page>\n    </>\n  );\n};\n\nexport default DiaryPage;\n"],"names":["ArticleCard","props","date","darkModeEnabled","useGlobalState","globalState","theme","Theme","relativeTime","dayjs","from","data","publishedAt","absoluteUrl","link","indexOf","articleCard","React","className","style","border","undefined","showBanner","image","src","GatsbyImage","imgClassName","childImageSharp","gatsbyImageData","alt","title","category","getMonth","getDate","getFullYear","ArticleCardStyled","href","target","rel","Link","to","replace","ArticleSource","styled","ArticlesSection","response","useStaticQuery","articles","setArticles","configuration","sources","length","Error","map","i","toLowerCase","includes","Medium","siteMetadata","useSiteMetadata","profileUrl","social","medium","Blog","valid","validateAndConfigureSources","collectArticlesFromSources","mediumConfig","blogConfig","articleList","useMediumFeed","mediumArticles","forEach","article","push","categories","Date","pubDate","blogArticles","allArticle","slug","readingTime","text","slice","sort","a","b","getTime","_asyncToGenerator","ArticleStyled","Animation","type","delay","heading","Slider","additionalClasses","key","_toConsumableArray","Array","_","DiaryStyled","sectionId","URLSearchParams","window","location","search","get","useTitleTemplate","noIndex","DiaryDetailSection"],"sourceRoot":""}