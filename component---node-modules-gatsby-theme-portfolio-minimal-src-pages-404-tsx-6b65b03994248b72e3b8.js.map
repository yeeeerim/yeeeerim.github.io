{"version":3,"file":"component---node-modules-gatsby-theme-portfolio-minimal-src-pages-404-tsx-6b65b03994248b72e3b8.js","mappings":"iPAUO,SAASA,EAAKC,GACjB,IAAMC,GAAoBC,EAAAA,EAAAA,KAC1B,OACIC,EAAAA,cAACC,EAAAA,GAAmB,CAChBC,aAAcJ,EAAkBK,eAAeC,qBAAuBC,EAAAA,GAAAA,KAAaA,EAAAA,GAAAA,MACnFC,kCAAmCR,EAAkBK,eAAeG,kCACpEC,yBAA0BV,EAAMU,2BAA4B,GAE5DP,EAAAA,cAACQ,EAAAA,EAAM,CACHD,yBAA0BV,EAAMU,2BAA4B,EAC5DE,aAAcX,EAAkBK,eAAeM,cAE9CZ,EAAMa,UAIvB,C,qECzBWC,EAAiB,uCCSrB,SAASC,EAAQf,GACpB,IAAIgB,EAMJ,OAJIA,EADAhB,EAAMiB,kBACMjB,EAAMiB,kBAAkBC,OAAOC,GAAwBC,KAAK,KAE5DD,EAGZhB,EAAAA,cAAAA,UAAAA,CAASkB,GAAIrB,EAAMsB,OAAQC,UDfd,gCCgBTpB,EAAAA,cAAAA,MAAAA,CAAKoB,UAAWP,GACXhB,EAAMwB,SAAWrB,EAAAA,cAAAA,KAAAA,CAAIoB,UDlBjB,gCCkB8CvB,EAAMwB,SACxDxB,EAAMa,UAIvB,C,kGCbO,SAASY,EAAIzB,GAChB,IAAM0B,GAAWC,EAAAA,EAAAA,eACXC,EAAY,kBAAQC,EAAAA,EAAAA,KAAsB7B,GAE1C8B,EAAeF,EAAaG,WAC3BH,EAAaI,QAAUJ,EAAaG,UAAUE,gBAAgBC,SAASC,KAAKC,QAAQ,eAAgB,WACrGC,EAEN,OACIlC,EAAAA,cAACmC,EAAAA,EAAM,CACHC,MAAOX,EAAaW,MACpBC,cAAexC,EAAMyC,iBAAmBb,EAAaY,mBAAgBH,EACrEK,eAAgB,CAAEC,KAAMf,EAAagB,WAEpC5C,EAAM6C,SAAW1C,EAAAA,cAAAA,OAAAA,CAAM2C,KAAK,SAASC,QAAQ,YAC9C5C,EAAAA,cAAAA,OAAAA,CAAM2C,KAAK,cAAcC,QAASnB,EAAaoB,cAC/C7C,EAAAA,cAAAA,OAAAA,CAAM8C,SAAS,WAAWF,QAASnB,EAAaW,QAChDpC,EAAAA,cAAAA,OAAAA,CAAM8C,SAAS,eAAeF,QAASnB,EAAaW,QACpDpC,EAAAA,cAAAA,OAAAA,CAAM8C,SAAS,SAASF,QAASnB,EAAaI,QAAUN,EAASwB,WAChEpB,GAAgB3B,EAAAA,cAAAA,OAAAA,CAAM8C,SAAS,WAAWF,QAASjB,IACpD3B,EAAAA,cAAAA,OAAAA,CAAM8C,SAAS,iBAAiBF,QAASnB,EAAaoB,cACtD7C,EAAAA,cAAAA,OAAAA,CAAM8C,SAAS,UAAUF,QAAQ,YACjC5C,EAAAA,cAAAA,OAAAA,CAAM8C,SAAS,eAAeF,QAAQ,YACtC5C,EAAAA,cAAAA,OAAAA,CAAM8C,SAAS,kBAAkBF,QAASnB,EAAauB,SACvDhD,EAAAA,cAAAA,OAAAA,CAAM8C,SAAS,gBAAgBF,QAASnB,EAAaW,QACrDpC,EAAAA,cAAAA,OAAAA,CAAM8C,SAAS,sBAAsBF,QAASnB,EAAaoB,cAGvE,C,qECpBO,SAASnB,IAEZ,OADqEuB,EAAAA,EAAAA,gBAAeC,GACxEC,gBAAgBC,SAAS,GAAG3B,YAC5C,CAEO,IAAMyB,EAAK,Y,+GCpBH,SAASG,IACpB,OACIrD,EAAAA,cAAAA,EAAAA,SAAAA,KACIA,EAAAA,cAACsB,EAAAA,EAAG,CAACc,MAAM,iBAAiBM,SAAS,IACrC1C,EAAAA,cAACJ,EAAAA,EAAI,KACDI,EAAAA,cAACY,EAAAA,EAAO,CAACS,QAAQ,YAAYF,OAAO,OAChCnB,EAAAA,cAAAA,IAAAA,KAAAA,6DAKpB,C","sources":["webpack://gatsby-starter-portfolio-minimal-theme/./node_modules/gatsby-theme-portfolio-minimal/src/components/Page/index.tsx","webpack://gatsby-starter-portfolio-minimal-theme/./node_modules/gatsby-theme-portfolio-minimal/src/components/Section/style.module.css","webpack://gatsby-starter-portfolio-minimal-theme/./node_modules/gatsby-theme-portfolio-minimal/src/components/Section/index.tsx","webpack://gatsby-starter-portfolio-minimal-theme/./node_modules/gatsby-theme-portfolio-minimal/src/components/Seo/index.tsx","webpack://gatsby-starter-portfolio-minimal-theme/./node_modules/gatsby-theme-portfolio-minimal/src/hooks/useSiteMetadata.tsx","webpack://gatsby-starter-portfolio-minimal-theme/./node_modules/gatsby-theme-portfolio-minimal/src/pages/404.tsx"],"sourcesContent":["import React from 'react';\nimport { GlobalStateProvider, Theme } from '../../context';\nimport { useSiteConfiguration } from '../../hooks/useSiteConfiguration';\nimport { Layout } from '../Layout';\n\ninterface PageProps {\n    children: React.ReactElement;\n    useSplashScreenAnimation?: boolean;\n}\n\nexport function Page(props: PageProps): React.ReactElement {\n    const siteConfiguration = useSiteConfiguration();\n    return (\n        <GlobalStateProvider\n            defaultTheme={siteConfiguration.featureToggles.useDarkModeAsDefault ? Theme.Dark : Theme.Light}\n            useDarkModeBasedOnUsersPreference={siteConfiguration.featureToggles.useDarkModeBasedOnUsersPreference}\n            useSplashScreenAnimation={props.useSplashScreenAnimation || false}\n        >\n            <Layout\n                useSplashScreenAnimation={props.useSplashScreenAnimation || false}\n                useCookieBar={siteConfiguration.featureToggles.useCookieBar}\n            >\n                {props.children}\n            </Layout>\n        </GlobalStateProvider>\n    );\n}\n","// extracted by mini-css-extract-plugin\nexport var ContentWrapper = \"style-module--ContentWrapperÂ --36dde\";\nexport var Heading = \"style-module--Heading--2c002\";\nexport var Section = \"style-module--Section--1d871\";","import React from 'react';\nimport * as classes from './style.module.css';\n\ninterface SectionProps {\n    anchor: string;\n    heading?: string;\n    additionalClasses?: string[];\n    children: React.ReactNode;\n}\n\nexport function Section(props: SectionProps): React.ReactElement {\n    let classList;\n    if (props.additionalClasses) {\n        classList = props.additionalClasses.concat(classes.ContentWrapper).join(' ');\n    } else {\n        classList = classes.ContentWrapper;\n    }\n    return (\n        <section id={props.anchor} className={classes.Section}>\n            <div className={classList}>\n                {props.heading && <h3 className={classes.Heading}>{props.heading}</h3>}\n                {props.children}\n            </div>\n        </section>\n    );\n}\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useLocation } from '@reach/router';\nimport { useSiteMetadata } from '../../hooks/useSiteMetadata';\n\ninterface SeoProps {\n    title: string;\n    useTitleTemplate?: boolean;\n    noIndex?: boolean;\n    description?: string;\n}\n\nexport function Seo(props: SeoProps): React.ReactElement {\n    const location = useLocation();\n    const siteMetadata = { ...useSiteMetadata(), ...props };\n\n    const thumbnailUrl = siteMetadata.thumbnail\n        ? (siteMetadata.siteUrl + siteMetadata.thumbnail.childImageSharp.original.src).replace(/([^:]\\/)\\/+/g, '$1')\n        : undefined;\n\n    return (\n        <Helmet\n            title={siteMetadata.title}\n            titleTemplate={props.useTitleTemplate ? siteMetadata.titleTemplate : undefined}\n            htmlAttributes={{ lang: siteMetadata.language }}\n        >\n            {props.noIndex && <meta name=\"robots\" content=\"noindex\" />}\n            <meta name=\"description\" content={siteMetadata.description} />\n            <meta property=\"og:title\" content={siteMetadata.title} />\n            <meta property=\"og:site_name\" content={siteMetadata.title} />\n            <meta property=\"og:url\" content={siteMetadata.siteUrl + location.pathname} />\n            {thumbnailUrl && <meta property=\"og:image\" content={thumbnailUrl} />}\n            <meta property=\"og:description\" content={siteMetadata.description} />\n            <meta property=\"og:type\" content=\"website\" />\n            <meta property=\"twitter:card\" content=\"summary\" />\n            <meta property=\"twitter:creator\" content={siteMetadata.author} />\n            <meta property=\"twitter:title\" content={siteMetadata.title} />\n            <meta property=\"twitter:description\" content={siteMetadata.description} />\n        </Helmet>\n    );\n}\n","import { graphql, useStaticQuery } from 'gatsby';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\nimport { SocialProfile } from '../components/SocialProfiles';\nimport { AllSettingsQueryResult } from '../types';\n\nexport interface SiteMetadata {\n    language: string;\n    siteUrl: string;\n    thumbnail: { childImageSharp: { original: { src: string } } };\n    title: string;\n    titleTemplate: string;\n    description: string;\n    author: string;\n    avatar: { childImageSharp: { gatsbyImageData: IGatsbyImageData } };\n    bio: string;\n    social: {\n        [profile in SocialProfile]: string;\n    };\n}\n\nexport function useSiteMetadata(): SiteMetadata {\n    const data: AllSettingsQueryResult<{ siteMetadata: SiteMetadata }> = useStaticQuery(query);\n    return data.allSettingsJson.settings[0].siteMetadata;\n}\n\nexport const query = graphql`\n    query SiteMetadata {\n        allSettingsJson: allContentJson {\n            settings: nodes {\n                siteMetadata {\n                    author\n                    avatar {\n                        childImageSharp {\n                            gatsbyImageData(height: 100, width: 100)\n                        }\n                    }\n                    bio\n                    description\n                    language\n                    siteUrl\n                    thumbnail {\n                        childImageSharp {\n                            original {\n                                src\n                            }\n                        }\n                    }\n                    title\n                    social {\n                        behance\n                        github\n                        linkedin\n                        mail\n                        medium\n                        twitter\n                        hashnode\n                    }\n                    titleTemplate\n                }\n            }\n        }\n    }\n`;\n","import React from 'react';\nimport { Page } from '../components/Page';\nimport { Section } from '../components/Section';\nimport { Seo } from '../components/Seo';\n\nexport default function NotFoundPage(): React.ReactElement {\n    return (\n        <>\n            <Seo title=\"404: Not found\" noIndex={true} />\n            <Page>\n                <Section heading=\"Not Found\" anchor=\"404\">\n                    <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n                </Section>\n            </Page>\n        </>\n    );\n}\n"],"names":["Page","props","siteConfiguration","useSiteConfiguration","React","GlobalStateProvider","defaultTheme","featureToggles","useDarkModeAsDefault","Theme","useDarkModeBasedOnUsersPreference","useSplashScreenAnimation","Layout","useCookieBar","children","ContentWrapper","Section","classList","additionalClasses","concat","classes","join","id","anchor","className","heading","Seo","location","useLocation","siteMetadata","useSiteMetadata","thumbnailUrl","thumbnail","siteUrl","childImageSharp","original","src","replace","undefined","Helmet","title","titleTemplate","useTitleTemplate","htmlAttributes","lang","language","noIndex","name","content","description","property","pathname","author","useStaticQuery","query","allSettingsJson","settings","NotFoundPage"],"sourceRoot":""}