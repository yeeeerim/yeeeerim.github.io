{"version":3,"file":"component---src-pages-404-tsx-9a570229df08faf2bc78.js","mappings":"gPAYO,SAASA,EAAIC,GAChB,IAAMC,GAAWC,EAAAA,EAAAA,eACXC,EAAY,kBAAQC,EAAAA,EAAAA,KAAsBJ,GAE1CK,EAAeF,EAAaG,WAC3BH,EAAaI,QAAUJ,EAAaG,UAAUE,gBAAgBC,SAASC,KAAKC,QAAQ,eAAgB,WACrGC,EAEN,OACIC,EAAAA,cAACC,EAAAA,EAAM,CACHC,MAAOZ,EAAaY,MACpBC,cAAehB,EAAMiB,iBAAmBd,EAAaa,mBAAgBJ,EACrEM,eAAgB,CAAEC,KAAMhB,EAAaiB,WAEpCpB,EAAMqB,SAAWR,EAAAA,cAAAA,OAAAA,CAAMS,KAAK,SAASC,QAAQ,YAC9CV,EAAAA,cAAAA,OAAAA,CAAMS,KAAK,cAAcC,QAASpB,EAAaqB,cAC/CX,EAAAA,cAAAA,OAAAA,CAAMY,SAAS,WAAWF,QAASpB,EAAaY,QAChDF,EAAAA,cAAAA,OAAAA,CAAMY,SAAS,eAAeF,QAASpB,EAAaY,QACpDF,EAAAA,cAAAA,OAAAA,CAAMY,SAAS,SAASF,QAASpB,EAAaI,QAAUN,EAASyB,WAChErB,GAAgBQ,EAAAA,cAAAA,OAAAA,CAAMY,SAAS,WAAWF,QAASlB,IACpDQ,EAAAA,cAAAA,OAAAA,CAAMY,SAAS,iBAAiBF,QAASpB,EAAaqB,cACtDX,EAAAA,cAAAA,OAAAA,CAAMY,SAAS,UAAUF,QAAQ,YACjCV,EAAAA,cAAAA,OAAAA,CAAMY,SAAS,eAAeF,QAAQ,YACtCV,EAAAA,cAAAA,OAAAA,CAAMY,SAAS,kBAAkBF,QAASpB,EAAawB,SACvDd,EAAAA,cAAAA,OAAAA,CAAMY,SAAS,gBAAgBF,QAASpB,EAAaY,QACrDF,EAAAA,cAAAA,OAAAA,CAAMY,SAAS,sBAAsBF,QAASpB,EAAaqB,cAGvE,C,qECpBO,SAASpB,IAEZ,OADqEwB,EAAAA,EAAAA,gBAAeC,GACxEC,gBAAgBC,SAAS,GAAG5B,YAC5C,CAEO,IAAM0B,EAAK,Y,mGCZX,SAASG,EAAKhC,GACnB,IAAMiC,GAAoBC,EAAAA,EAAAA,KAC1B,OACErB,EAAAA,cAACsB,EAAAA,GAAmB,CAClBC,aAAcC,EAAAA,GAAAA,KACdC,kCACEL,EAAkBM,eAAeD,kCAEnCE,yBAA0BxC,EAAMwC,2BAA4B,GAE5D3B,EAAAA,cAAC4B,EAAAA,EAAM,CACLD,yBAA0BxC,EAAMwC,2BAA4B,EAC5DE,aAAcT,EAAkBM,eAAeG,cAE9C1C,EAAM2C,UAIf,C,qGC3Be,SAASC,IACtB,OACE/B,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAACd,EAAAA,EAAG,CAACgB,MAAM,iBAAiBM,SAAS,IACrCR,EAAAA,cAACmB,EAAAA,EAAI,KACHnB,EAAAA,cAAAA,EAAAA,SAAAA,OAIR,C","sources":["webpack://gatsby-starter-portfolio-minimal-theme/./node_modules/gatsby-theme-portfolio-minimal/src/components/Seo/index.tsx","webpack://gatsby-starter-portfolio-minimal-theme/./node_modules/gatsby-theme-portfolio-minimal/src/hooks/useSiteMetadata.tsx","webpack://gatsby-starter-portfolio-minimal-theme/./src/components/page/index.tsx","webpack://gatsby-starter-portfolio-minimal-theme/./src/pages/404.tsx"],"sourcesContent":["import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useLocation } from '@reach/router';\nimport { useSiteMetadata } from '../../hooks/useSiteMetadata';\n\ninterface SeoProps {\n    title: string;\n    useTitleTemplate?: boolean;\n    noIndex?: boolean;\n    description?: string;\n}\n\nexport function Seo(props: SeoProps): React.ReactElement {\n    const location = useLocation();\n    const siteMetadata = { ...useSiteMetadata(), ...props };\n\n    const thumbnailUrl = siteMetadata.thumbnail\n        ? (siteMetadata.siteUrl + siteMetadata.thumbnail.childImageSharp.original.src).replace(/([^:]\\/)\\/+/g, '$1')\n        : undefined;\n\n    return (\n        <Helmet\n            title={siteMetadata.title}\n            titleTemplate={props.useTitleTemplate ? siteMetadata.titleTemplate : undefined}\n            htmlAttributes={{ lang: siteMetadata.language }}\n        >\n            {props.noIndex && <meta name=\"robots\" content=\"noindex\" />}\n            <meta name=\"description\" content={siteMetadata.description} />\n            <meta property=\"og:title\" content={siteMetadata.title} />\n            <meta property=\"og:site_name\" content={siteMetadata.title} />\n            <meta property=\"og:url\" content={siteMetadata.siteUrl + location.pathname} />\n            {thumbnailUrl && <meta property=\"og:image\" content={thumbnailUrl} />}\n            <meta property=\"og:description\" content={siteMetadata.description} />\n            <meta property=\"og:type\" content=\"website\" />\n            <meta property=\"twitter:card\" content=\"summary\" />\n            <meta property=\"twitter:creator\" content={siteMetadata.author} />\n            <meta property=\"twitter:title\" content={siteMetadata.title} />\n            <meta property=\"twitter:description\" content={siteMetadata.description} />\n        </Helmet>\n    );\n}\n","import { graphql, useStaticQuery } from 'gatsby';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\nimport { SocialProfile } from '../components/SocialProfiles';\nimport { AllSettingsQueryResult } from '../types';\n\nexport interface SiteMetadata {\n    language: string;\n    siteUrl: string;\n    thumbnail: { childImageSharp: { original: { src: string } } };\n    title: string;\n    titleTemplate: string;\n    description: string;\n    author: string;\n    avatar: { childImageSharp: { gatsbyImageData: IGatsbyImageData } };\n    bio: string;\n    social: {\n        [profile in SocialProfile]: string;\n    };\n}\n\nexport function useSiteMetadata(): SiteMetadata {\n    const data: AllSettingsQueryResult<{ siteMetadata: SiteMetadata }> = useStaticQuery(query);\n    return data.allSettingsJson.settings[0].siteMetadata;\n}\n\nexport const query = graphql`\n    query SiteMetadata {\n        allSettingsJson: allContentJson {\n            settings: nodes {\n                siteMetadata {\n                    author\n                    avatar {\n                        childImageSharp {\n                            gatsbyImageData(height: 100, width: 100)\n                        }\n                    }\n                    bio\n                    description\n                    language\n                    siteUrl\n                    thumbnail {\n                        childImageSharp {\n                            original {\n                                src\n                            }\n                        }\n                    }\n                    title\n                    social {\n                        behance\n                        github\n                        linkedin\n                        mail\n                        medium\n                        twitter\n                        hashnode\n                    }\n                    titleTemplate\n                }\n            }\n        }\n    }\n`;\n","import { Layout } from \"gatsby-theme-portfolio-minimal/src/components/Layout\";\nimport {\n  GlobalStateProvider,\n  Theme,\n} from \"gatsby-theme-portfolio-minimal/src/context\";\nimport { useSiteConfiguration } from \"gatsby-theme-portfolio-minimal/src/hooks/useSiteConfiguration\";\nimport React from \"react\";\n\ninterface PageProps {\n  children: React.ReactElement;\n  useSplashScreenAnimation?: boolean;\n}\n\nexport function Page(props: PageProps): React.ReactElement {\n  const siteConfiguration = useSiteConfiguration();\n  return (\n    <GlobalStateProvider\n      defaultTheme={Theme.Dark}\n      useDarkModeBasedOnUsersPreference={\n        siteConfiguration.featureToggles.useDarkModeBasedOnUsersPreference\n      }\n      useSplashScreenAnimation={props.useSplashScreenAnimation || false}\n    >\n      <Layout\n        useSplashScreenAnimation={props.useSplashScreenAnimation || false}\n        useCookieBar={siteConfiguration.featureToggles.useCookieBar}\n      >\n        {props.children}\n      </Layout>\n    </GlobalStateProvider>\n  );\n}\n","import React from \"react\";\nimport { Page } from \"../components/page\";\nimport { Seo } from \"gatsby-theme-portfolio-minimal/src/components/Seo\";\n\nexport default function NotFoundPage(): React.ReactElement {\n  return (\n    <>\n      <Seo title=\"404: Not found\" noIndex={true} />\n      <Page>\n        <></>\n      </Page>\n    </>\n  );\n}\n"],"names":["Seo","props","location","useLocation","siteMetadata","useSiteMetadata","thumbnailUrl","thumbnail","siteUrl","childImageSharp","original","src","replace","undefined","React","Helmet","title","titleTemplate","useTitleTemplate","htmlAttributes","lang","language","noIndex","name","content","description","property","pathname","author","useStaticQuery","query","allSettingsJson","settings","Page","siteConfiguration","useSiteConfiguration","GlobalStateProvider","defaultTheme","Theme","useDarkModeBasedOnUsersPreference","featureToggles","useSplashScreenAnimation","Layout","useCookieBar","children","NotFoundPage"],"sourceRoot":""}